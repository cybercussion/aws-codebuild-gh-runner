name: CodeBuild Multi-Stage Pipeline

on:
  push:
    branches:
      - main  # Triggers automatically on push to main

  workflow_dispatch:
    inputs:
      environment:
        description: "Select the environment to deploy to"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - stage
          - perf
      debug:
        description: "Enable Debug Mode?"
        required: true
        default: "false"
        type: choice
        options:
          - "true"
          - "false"
      log_level:
        description: "Log Level"
        required: false
        default: "info"
        type: choice
        options:
          - "info"
          - "debug"
          - "warn"
          - "error"

jobs:
  security_scan:
    if: github.event_name == 'push'  # Only runs on push, not manual triggers
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Secrets Detection with GitLeaks
        uses: zricethezav/gitleaks-action@v2
        continue-on-error: true  # Avoid stopping pipeline on warnings

      - name: Install Trivy for Security Scanning
        run: |
          echo "Detecting Ubuntu version..."
          UBUNTU_VERSION=$(lsb_release -rs)
          
          if [[ "$UBUNTU_VERSION" == "24.04" ]]; then
            echo "Ubuntu 24.04 detected, installing Trivy via Snap..."
            sudo snap install trivy
          else
            echo "Installing Trivy from GitHub releases..."
            TRIVY_VERSION=$(curl -s https://api.github.com/repos/aquasecurity/trivy/releases/latest | grep -o '"tag_name": *"v[0-9.]*"' | sed -E 's/"tag_name": *"v?([^"]+)"/\1/')
            wget -qO trivy.tar.gz https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_Linux-64bit.tar.gz
            tar -zxvf trivy.tar.gz
            sudo mv trivy /usr/local/bin/
          fi
          
          # Verify installation
          trivy --version

      - name: Run Trivy Vulnerability Scan
        run: |
          echo "Running Trivy scan..."
          trivy fs --severity HIGH,CRITICAL --exit-code 1 --no-progress .

      - name: Install License Finder
        run: |
          gem install license_finder

      - name: Run License Compliance Check
        run: |
          license_finder

  build:
    needs: security_scan  # Ensures security checks complete before building
    runs-on: codebuild-github-runner-${{ github.run_id }}-${{ github.run_attempt }}
    strategy:
      matrix:
        service: [service-a, service-b, service-c]  # List of subfolders to build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build ${{ matrix.service }}
        run: |
          echo "Building ${{ matrix.service }}..."
          cd services/${{ matrix.service }}
          sleep 5  # Simulating a build step
          echo "Build complete for ${{ matrix.service }}!"

      - name: Save Build Artifacts
        run: |
          mkdir -p build_artifacts/${{ matrix.service }}
          echo "Build output for ${{ matrix.service }}" > build_artifacts/${{ matrix.service }}/output.txt
          echo "Build successful" > build_artifacts/${{ matrix.service }}/status.txt
        shell: bash

  test:
    needs: build
    runs-on: codebuild-github-runner-${{ github.run_id }}-${{ github.run_attempt }}
    strategy:
      matrix:
        service: [service-a, service-b, service-c]  # Matches build matrix
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Tests for ${{ matrix.service }}
        run: |
          echo "Running tests for ${{ matrix.service }}..."
          cd services/${{ matrix.service }}
          sleep 3  # Simulating test execution
          echo "Tests complete for ${{ matrix.service }}!"

      - name: Test Results
        run: |
          echo "All tests passed for ${{ matrix.service }}!"
        shell: bash

  deploy:
    needs: test
    runs-on: codebuild-github-runner-${{ github.run_id }}-${{ github.run_attempt }}
    if: github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set Deployment Parameters
        run: |
          ENV="${{ github.event.inputs.environment || 'dev' }}"
          DEBUG_MODE="${{ github.event.inputs.debug || 'false' }}"
          LOG_LEVEL="${{ github.event.inputs.log_level || 'info' }}"
          
          echo "Deploying to environment: $ENV"
          echo "Debug Mode: $DEBUG_MODE"
          echo "Log Level: $LOG_LEVEL"

          # Export variables for later use
          echo "ENV=$ENV" >> $GITHUB_ENV
          echo "DEBUG_MODE=$DEBUG_MODE" >> $GITHUB_ENV
          echo "LOG_LEVEL=$LOG_LEVEL" >> $GITHUB_ENV
        shell: bash

      - name: Deploy Application
        run: |
          echo "Starting deployment..."
          echo "Target Environment: $ENV"
          echo "Debug Mode Enabled: $DEBUG_MODE"
          echo "Using Log Level: $LOG_LEVEL"
          
          sleep 3  # Simulating deployment process

          if [[ "$DEBUG_MODE" == "true" ]]; then
            echo "Debugging enabled! Running extra logs..."
            # Simulate debug logging
            echo "Debugging details..."
          fi

          echo "Deployment to $ENV complete!"
        shell: bash