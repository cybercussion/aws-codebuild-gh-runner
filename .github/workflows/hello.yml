name: CodeBuild Multi-Stage Pipeline

on:
  push:
    branches:
      - main  # Triggers automatically on push to main

  pull_request:
    branches:
      - main
      - develop
    types:
      - opened
      - synchronize
      - ready_for_review

  workflow_dispatch:
    inputs:
      environment:
        description: "Select the environment to deploy to"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - stage
          - perf
      debug:
        description: "Enable Debug Mode?"
        required: true
        default: "false"
        type: choice
        options:
          - "true"
          - "false"
      log_level:
        description: "Log Level"
        required: false
        default: "info"
        type: choice
        options:
          - "info"
          - "debug"
          - "warn"
          - "error"

jobs:
  security_scan:
    if: github.event_name == 'push' || github.event_name == 'pull_request'  # Runs on PRs too
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      - name: Secrets Detection with GitLeaks
        uses: zricethezav/gitleaks-action@v2
        continue-on-error: true  # Avoid stopping pipeline on warnings

      - name: Run Trivy Scan (Vulnerability Scanner)
        uses: aquasecurity/trivy-action@master
        with:
          scan-ref: '.'
          scan-type: 'fs'
          severity: 'HIGH,CRITICAL'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy Report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan-results
          path: trivy-results.sarif

      - name: Install License Finder
        run: |
          gem install --user-install license_finder
          export PATH="$(ruby -r rubygems -e 'puts Gem.user_dir')/bin:$PATH"
          license_finder version

      - name: Run License Compliance Check
        run: |
          export PATH="$(ruby -r rubygems -e 'puts Gem.user_dir')/bin:$PATH"
          license_finder

  build:
    needs: security_scan
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    runs-on: codebuild-github-runner-${{ github.run_id }}-${{ github.run_attempt }}
    strategy:
      matrix:
        service: [service-a, service-b, service-c]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Dependencies for ${{ matrix.service }}
        run: |
          cd services/${{ matrix.service }}

          # Check if it's a Python project
          if [ -f "app/requirements.txt" ]; then
            echo "Detected Python service. Installing dependencies..."
            pip install -r app/requirements.txt
          fi

          # Check if it's a Node.js project
          if [ -f "src/package.json" ]; then
            echo "Detected Node.js service. Installing dependencies..."
            npm install --no-progress
          fi

      - name: Build ${{ matrix.service }}
        run: |
          cd services/${{ matrix.service }}
          echo "Building ${{ matrix.service }}..."
          sleep 5
          echo "Build complete for ${{ matrix.service }}!"

      - name: Save Build Artifacts
        run: |
          mkdir -p build_artifacts/${{ matrix.service }}
          echo "Build output for ${{ matrix.service }}" > build_artifacts/${{ matrix.service }}/output.txt
          echo "Build successful" > build_artifacts/${{ matrix.service }}/status.txt
        shell: bash

  codeql_analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: 'javascript, python'

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  test:
    needs: build
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    runs-on: codebuild-github-runner-${{ github.run_id }}-${{ github.run_attempt }}
    strategy:
      matrix:
        service: [service-a, service-b, service-c]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Tests for ${{ matrix.service }}
        run: |
          echo "Running tests for ${{ matrix.service }}..."
          cd services/${{ matrix.service }}
          sleep 3
          echo "Tests complete for ${{ matrix.service }}!"

      - name: Test Results
        run: |
          echo "All tests passed for ${{ matrix.service }}!"
        shell: bash

  deploy:
    needs: test
    if: github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main'  # Prevent deployment on PRs
    runs-on: codebuild-github-runner-${{ github.run_id }}-${{ github.run_attempt }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set Deployment Parameters
        run: |
          ENV="${{ github.event.inputs.environment || 'dev' }}"
          DEBUG_MODE="${{ github.event.inputs.debug || 'false' }}"
          LOG_LEVEL="${{ github.event.inputs.log_level || 'info' }}"
          
          echo "Deploying to environment: $ENV"
          echo "Debug Mode: $DEBUG_MODE"
          echo "Log Level: $LOG_LEVEL"

          # Export variables for later use
          echo "ENV=$ENV" >> $GITHUB_ENV
          echo "DEBUG_MODE=$DEBUG_MODE" >> $GITHUB_ENV
          echo "LOG_LEVEL=$LOG_LEVEL" >> $GITHUB_ENV
        shell: bash

      - name: Deploy Application
        run: |
          echo "Starting deployment..."
          echo "Target Environment: $ENV"
          echo "Debug Mode Enabled: $DEBUG_MODE"
          echo "Using Log Level: $LOG_LEVEL"
          
          sleep 3
          echo "Deployment to $ENV complete!"
        shell: bash